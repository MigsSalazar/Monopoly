package monopoly7.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;

import monopoly7.event.PlayerChangeEvent;
import monopoly7.event.PlayerChangeEvent.ChangeCode;
import monopoly7.event.PlayerChangeListener;

public class PlayerTest {
	
	private Player player;
	private PlayerChangeListener changeMock;
	private PlayerChangeEvent pce = null;
	
	@Before
	public void setup(){
		player = new Player();
		changeMock = mock(PlayerChangeListener.class);
		pce = null;
		doAnswer( (InvocationOnMock i) -> {
				for( Object o : i.getArguments() ){
					if( o instanceof PlayerChangeEvent )
						pce = (PlayerChangeEvent)o;
				}
				return null;
			}
		).when(changeMock).playerStateChanged(anyObject());
		player.addPlayerChangeListener(changeMock);
		pce = null;
	}

	public void playerChangeEventAsserts( String msg, ChangeCode stat, Object src, Object ov, Object nv){
		assertNotNull( pce );
		assertEquals( msg, pce.getMessage() );
		assertEquals( stat, pce.getStatus() );
		assertEquals( src, pce.getSource() );
		assertEquals( ov, pce.getOldValue() );
		assertEquals( nv, pce.getNewValue() );
	}
	
	@Test
	public void testComparators(){
		Player jake = mock(Player.class);
		when(jake.getName()).thenReturn("jake");
		when(jake.getId()).thenReturn(0);
		when(jake.getWealth()).thenReturn(0);
		
		Player trent = mock(Player.class);
		when(trent.getName()).thenReturn("trent");
		when(trent.getId()).thenReturn(1);
		when(trent.getWealth()).thenReturn(40);
		
		Player drew = mock(Player.class);
		when(drew.getName()).thenReturn("drew");
		when(drew.getId()).thenReturn(2);
		when(drew.getWealth()).thenReturn(20);
		
		ArrayList<Player> players = new ArrayList<Player>();
		
		players.add(jake);
		players.add(drew);
		players.add(trent);
		testComparatorByName( players, drew, jake, trent );
		testComparatorById( players, jake, trent, drew );
		testComparatorByWealth( players, jake, drew, trent );
	}
	
	public void testComparatorByWealth( ArrayList<Player> players, Player p1, Player p2, Player p3 ){
		players.sort(Player.WEALTH_ORDER);
		
		assertEquals(p1, players.get(0));
		assertEquals(p2, players.get(1));
		assertEquals(p3, players.get(2));
	}
	
	public void testComparatorById( ArrayList<Player> players, Player p1, Player p2, Player p3 ){
		players.sort(Player.ID_ORDER);
		
		assertEquals(p1, players.get(0));
		assertEquals(p2, players.get(1));
		assertEquals(p3, players.get(2));
	}
	
	public void testComparatorByName( ArrayList<Player> players, Player p1, Player p2, Player p3 ){
		players.sort(Player.NAME_ORDER);
		
		assertEquals(p1, players.get(0));
		assertEquals(p2, players.get(1));
		assertEquals(p3, players.get(2));
	}
	
	@Test
	public void testGetters(){
		//These are all generated by lombok which I trust but I reaaaally want that 100% coverage
		assertEquals( "", player.getName() );
		assertEquals( 0, player.getId() );
		assertEquals( new HashMap<String, Property>(), player.getProps() );
	}
	
	@Test
	public void testSetCash(){
		assertEquals(0, player.getCash());
		player.setCash(100);
		verify(changeMock).playerStateChanged(anyObject());
		playerChangeEventAsserts( "cash changed", ChangeCode.CASH, player, 0, 100 );
		
		player.setCash(100);
		verify(changeMock).playerStateChanged(anyObject());
		playerChangeEventAsserts( "cash changed", ChangeCode.CASH, player, 0, 100 );
		
	}
	
	@Test
	public void testSetBankrupt() {
		//ensuring the values are initiated properly
		assertFalse( player.isBankrupt() );
		
		//ensure setting to the same value does nothing
		player.setBankrupt(false);
		assertFalse( player.isBankrupt() );
		verify(changeMock, never()).playerStateChanged(anyObject());
		assertNull( pce );
		
		//changing value releases a whole host of changes to check
		player.setBankrupt(true);
		//System.out.println("player is bankrupt: "+player.isBankrupt());
		assertTrue( player.isBankrupt() );
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "bankrupt changed", ChangeCode.BANKRUPT, player, false, true );
		
		//Making sure it works on multiple invocations
		player.setBankrupt(false);
		assertFalse( player.isBankrupt() );
		verify( changeMock, times(2) ).playerStateChanged(anyObject());

		playerChangeEventAsserts( "bankrupt changed", ChangeCode.BANKRUPT, player, true, false );
		
		
	}

	@Test
	public void testAdvancePosition() {
		assertEquals( 0, player.getPosition() );

		//Checking if basic movement works
		player.advancePosition(10);
		assertEquals( 10, player.getPosition() );
		verify( changeMock ).playerStateChanged(anyObject());
		PlayerChangeEvent temp = pce;
		playerChangeEventAsserts( "position increased", ChangeCode.POSITION, player, 0, 10 );
		
		//ensuring method prevent's going backwards
		player.advancePosition( -5 );
		assertEquals( 10, player.getPosition() );
		assertEquals( temp, pce );
		
	}

	@Test
	public void testRetreatPosition() {
		assertEquals( 0, player.getPosition() );

		//Checking if basic movement works
		player.retreatPosition(10);
		assertEquals( -10, player.getPosition() );
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "position decreased", ChangeCode.POSITION, player, 0, -10);
		PlayerChangeEvent temp = pce;
		
		//ensuring method prevent's going backwards
		player.retreatPosition( -5 );
		assertNotNull(pce);
		assertEquals( temp, pce );
		assertEquals( -10, player.getPosition() );
		verify( changeMock ).playerStateChanged(anyObject());
	}

	@Test
	public void testSetPosition() {
		assertEquals( 0, player.getPosition() );
		
		player.setPosition( 200 );
		assertEquals( 200, player.getPosition() );
		verify(changeMock).playerStateChanged(anyObject());
		playerChangeEventAsserts( "position changed", ChangeCode.POSITION, player, 0, 200 );
	}
	

	@Test
	public void testGetWealthWithNoProperties() {
		assertEquals( 0, player.getCash() );
		assertEquals( 0, player.getWealth() );
		player.addCash(2000);
		assertEquals( 2000, player.getWealth() );
	}
	
	@Test
	public void testGetWealthWithProperties(){
		Property propMock = mock(Property.class);
		when(propMock.getName()).thenReturn("mock1");
		when(propMock.getCost()).thenReturn(200);
		when(propMock.getWorth()).thenCallRealMethod();
		
		Property propMock2 = mock(Property.class);
		when(propMock.getName()).thenReturn("mock2");
		when(propMock2.getCost()).thenReturn(400);
		when(propMock2.getWorth()).thenCallRealMethod();
		
		testGetWealthWithNotMortgagedProperties(propMock, propMock2);
		player = new Player();
		testGetWealthWithAllMortgagedProperties(propMock, propMock2);
		player = new Player();
		testGetWealthWithSomeMortgagedAndSomeNotMortgagedProperties(propMock, propMock2);
	}
	
	public void testGetWealthWithNotMortgagedProperties( Property propMock, Property propMock2 ){
		when(propMock.isMortgaged()).thenReturn(false);
		when(propMock2.isMortgaged()).thenReturn(false);
		
		player.addProperty(propMock);
		assertEquals( 200, player.getWealth() );
		player.addCash(200);
		assertEquals( 400, player.getWealth() );
		
		player.addProperty(propMock2);
		assertEquals( 800, player.getWealth() );
		assertEquals( 200, player.getCash() );
	}
	
	public void testGetWealthWithAllMortgagedProperties( Property propMock, Property propMock2 ){
		when(propMock.isMortgaged()).thenReturn(true);
		when(propMock2.isMortgaged()).thenReturn(true);
		
		player.addProperty(propMock);
		assertEquals( 100, player.getWealth() );
		
		player.addCash(200);
		assertEquals( 300, player.getWealth() );
		
		player.addProperty(propMock2);
		assertEquals( 500, player.getWealth() );
		assertEquals( 200, player.getCash() );
		
	}
	
	public void testGetWealthWithSomeMortgagedAndSomeNotMortgagedProperties( Property propMock, Property propMock2 ){
		when(propMock.isMortgaged()).thenReturn(false);
		when(propMock2.isMortgaged()).thenReturn(true);
		
		player.addProperty(propMock);
		assertEquals( 200, player.getWealth() );
		
		player.addCash(200);
		assertEquals( 400, player.getWealth() );
		
		player.addProperty(propMock2);
		assertEquals( 600, player.getWealth() );
		assertEquals( 200, player.getCash() );
	}

	//TODO Edge cases to test
	//mortgaged props
	//non mortgaged props
	//props with houses
	//no props at all
	@Test
	public void testGetLiquidationWorth() {
		Property mortMock = mock(Property.class);
		when(mortMock.getName()).thenReturn("mortMock");
		when(mortMock.isMortgaged()).thenReturn(true);
		when(mortMock.getCost()).thenReturn(200);
		when(mortMock.getLiquidWorth()).thenCallRealMethod();
		when(mortMock.getWorth()).thenCallRealMethod();
		
		Property nonMortMock = mock(Property.class);
		when(nonMortMock.getName()).thenReturn("nonMortMock");
		when(nonMortMock.isMortgaged()).thenReturn(false);
		when(nonMortMock.getCost()).thenReturn(400);
		when(nonMortMock.getLiquidWorth()).thenCallRealMethod();
		when(nonMortMock.getWorth()).thenCallRealMethod();
		
		MonopolizableProperty upgradedMock = mock(MonopolizableProperty.class);
		when(upgradedMock.getName()).thenReturn("upgradedMock");
		when(upgradedMock.isMortgaged()).thenReturn(false);
		when(upgradedMock.getUpgradeCost()).thenReturn(100);
		when(upgradedMock.getCost()).thenReturn(600);
		when(upgradedMock.getLiquidWorth()).thenCallRealMethod();
		when(upgradedMock.getGrade()).thenReturn(3);
		when(upgradedMock.getWorth()).thenCallRealMethod();
		
		assertEquals(0, player.getCash());
		assertEquals(0, player.getWealth());
		
		//non mortgaged
		player.addProperty(nonMortMock);
		assertEquals( 200, player.getLiquidationWorth() );
		
		//mortgaged and not mortgaged
		player.addProperty(mortMock);
		assertEquals( 200, player.getLiquidationWorth() );
		
		//mortgaged, not mortgaged, and upgraded
		player.addProperty(upgradedMock);
		assertEquals( 800, player.getLiquidationWorth() );
		
		//non mortgaged and upgraded
		player.removeProperty("mortMock");
		assertEquals( 800, player.getLiquidationWorth() );
		
		//mortgaged and upgraded
		player.removeProperty("nonMortMock");
		player.addProperty(mortMock);
		assertEquals( 600, player.getLiquidationWorth() );
		
		player.removeProperty("upgradedMock");
		assertEquals(0, player.getLiquidationWorth() );
		
		player.removeProperty("mortMock");
		player.addProperty(upgradedMock);
		assertEquals( 600, player.getLiquidationWorth() );
	}

	@Test
	public void testOwnsPropProperty() {
		Property p = mock(Property.class);
		when(p.getName()).thenReturn("mock");
		player.addProperty(p);
		assertTrue(player.ownsProp(p));
		assertTrue(player.ownsProp(p.getName()));
	}
	
	@Test
	public void testAddPlayerChangeListener() {
		PlayerChangeListener mocked = mock(PlayerChangeListener.class);
		player.addPlayerChangeListener(mocked);
		verify( mocked, never() ).playerStateChanged(anyObject());
		player.addCash(0);
		verify( mocked ).playerStateChanged(anyObject());
		player.addPlayerChangeListener(mocked);
		player.addCash(0);
		verify( mocked, times(2) ).playerStateChanged(anyObject());
	}

	@Test
	public void testRemovePlayerChangeListener() {
		PlayerChangeListener mocked = mock(PlayerChangeListener.class);
		player.addPlayerChangeListener(mocked);
		verify( mocked, never() ).playerStateChanged(anyObject());
		player.addCash(0);
		verify( mocked ).playerStateChanged(anyObject());
		player.removePlayerChangeListener(mocked);
		player.addCash(0);
		verify( mocked ).playerStateChanged(anyObject());
	}

	@Test
	public void testAddCash() {
		player.addCash(200);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "cash added", ChangeCode.CASH, player, 0, 200 );
		assertEquals( 200, player.getCash() );
		
		player.addCash(-100);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "cash added", ChangeCode.CASH, player, 0, 200 );
		assertEquals( 200, player.getCash() );
	}

	@Test
	public void testSubCash() {
		player.subCash(200);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "cash subed", ChangeCode.CASH, player, 0, -200 );
		assertEquals( -200, player.getCash() );
		
		player.subCash(-100);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "cash subed", ChangeCode.CASH, player, 0, -200 );
		assertEquals( -200, player.getCash() );
	}

	@Test
	public void testAddBailout() {
		player.addBailout(5);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "bails added", ChangeCode.BAILOUT, player, 0, 5 );
		assertEquals( 5, player.getBails() );
		
		player.addBailout(-3);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "bails added", ChangeCode.BAILOUT, player, 0, 5 );
		assertEquals( 5, player.getBails() );
	}

	@Test
	public void testRemoveBailout() {
		player.removeBailout(5);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "bails subed", ChangeCode.BAILOUT, player, 0, -5 );
		assertEquals( -5, player.getBails() );
		
		player.removeBailout(-3);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "bails subed", ChangeCode.BAILOUT, player, 0, -5 );
		assertEquals( -5, player.getBails() );
	}

	@Test
	public void testAddProperty() {
		Property propMock = mock(Property.class);
		when(propMock.getName()).thenReturn("propMock");
		player.addProperty(propMock);
		verify( changeMock ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "obtained propMock", ChangeCode.PROPERTIES, player, null, propMock );
	}

	@Test
	public void testRemoveProperty() {
		Property propMock = mock(Property.class);
		when(propMock.getName()).thenReturn("propMock");
		player.addProperty(propMock);
		
		player.removeProperty(propMock.getName());
		verify( changeMock, times(2) ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "lost propMock", ChangeCode.PROPERTIES, player, propMock, null );
		
		player.removeProperty("i don't exist");
		verify( changeMock, times(2) ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "lost propMock", ChangeCode.PROPERTIES, player, propMock, null );
	}

	@Test
	public void testPropertyStateChanged() {
		MonopolizableProperty test = new MonopolizableProperty();
		player.addProperty(test);
		test.upgrade(10);
		
		verify( changeMock, times(2) ).playerStateChanged(anyObject());
		playerChangeEventAsserts( "property changed", ChangeCode.PROPERTIES, player, null, null );
	}

}
