package edu.illinois.masalzr2.gui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Scanner;

import javax.swing.ImageIcon;
import javax.swing.JFrame;

import com.google.gson.Gson;


public class TesterFrame {
	public static void main(String[] args){
		Board board = new Board();
		JFrame frame = new JFrame();
		
		board.setIconNumbers(fatbastard());
		ImageIcon[] icons = getIcons();
		board.setIcons(icons);
		
		board.setStickerBook(stickerBook());
		board.setStickers(getStickers());
		
		board.setStamps(getCollection());
		
		board.setDiceIcons(icons[1], icons[2]);
		board.paintDisplay();
		
		
		frame.add(board.getBoard());
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setLocationRelativeTo(null);
		//frame.repaint();
		
		frame.setVisible(true);
		
		
		//board.paintDisplay();
		
		Scanner kb = new Scanner(System.in);
		String input = "";
		
		while(!input.equals("exit")){
			System.out.println("What would you like to do?");
			input = kb.nextLine();
			if(input.equals("diceon") ){
				board.activateDice();
			}else if(input.equals("diceoff")){
				board.deactivateDice();
			}else if(input.equals("move dice")){
				System.out.print("X1: ");
				int x1 = kb.nextInt();
				System.out.print("Y1: ");
				int y1 = kb.nextInt();
				System.out.print("X2: ");
				int x2 = kb.nextInt();
				System.out.print("Y2: ");
				int y2 = kb.nextInt();
				
				board.activateDice();
				board.setDiceLocations(x1, y1, x2, y2);
				
			}else if(input.equals("set dice")){
				System.out.print("D1: ");
				int d1 = kb.nextInt();
				System.out.print("D2: ");
				int d2 = kb.nextInt();
				
				board.paintDice(d1, d2);
			}
		}
		
		kb.close();
		System.exit(0);
	}
	
	private static Stamp[][] getCollection(){
		
		Gson gson = new Gson();
		
		File f = new File("C:\\Users\\Unknown\\git\\Monopoly\\Version6\\textures\\default\\stamps.json");
		
		Stamp[][] collection = null;
		Reader readme = null;
		
		try {
			readme = new FileReader(f);
			collection = gson.fromJson(readme, Stamp[][].class);
			readme.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return collection;
	}
	
	private static ImageIcon[] getStickers(){
		String[] stickers = {	"housing.png",				//0
								"hotelLeft",				//1
								"hotelRight",				//2
								"hotelBottom",				//3
								
								"eleccomp.png",				//4
								"waterworks.png",			//5
								
								"jail.png",					//6
								"chesttop.png",				//7
								"chestbottom.png",			//8
								"chance.png",				//9
								
								"gotop.png",				//10
								"gomid.png",				//11
								"gobot.png",				//12
								
								"parktop.png",				//13
								"parkbot.png"};				//14
		
		String dir = System.getProperty("user.dir");
		ImageIcon[] retval = new ImageIcon[stickers.length];
		for(int i=0; i<stickers.length; i++){
			retval[i] = new ImageIcon(dir+"\\textures\\default\\"+stickers[i]);
			//System.out.println(retval[i].getDescription());
		}
		return retval;
	}
	
	private static ImageIcon[] getIcons(){
		
		String[] icons = {	"baseboard.png",			//0
							"dotdie.png",				//1
							"blankdie.png",				//2
							
							"purple.png",				//3
							"lightblue.png",			//4
							"pink.png",					//5
							"orange.png",				//6
							"red.png",					//7
							"yellow.png",				//8
							"green.png",				//9
							"blue.png"};				//10
		
		String dir = System.getProperty("user.dir");
		ImageIcon[] retval = new ImageIcon[icons.length];
		for(int i=0; i<icons.length; i++){
			retval[i] = new ImageIcon(dir+"\\textures\\default\\"+icons[i]);
		}
		return retval;
	}
	
	private static int[][] stickerBook(){
		int[][] temp = {{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //-1
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //1
						{-1,-1,-1,13,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //2
						{-1,-1,-1,14,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //3
						{-1,-1,-1,-1,-1,-1,	-1,-1,9,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,5,-1,-1,		-1,-1,-1,-1,-1,-1}, //4
						{-1,-1,-1,-1,-1,-1,	-1,-1,9,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,5,-1,-1,		-1,-1,-1,-1,-1,-1}, //5
						
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //6
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //7
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //8
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //9
						{-1,-1,-1,-1,7,7,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	7,7,-1,-1,-1,-1}, //1-1
						{-1,-1,-1,-1,8,8,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	8,8,-1,-1,-1,-1}, //11
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //12
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //13
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //14
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //15
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	9,9,-1,-1,-1,-1}, //16
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	9,9,-1,-1,-1,-1}, //17
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //18
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //19
						{-1,-1,-1,-1,4,4,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //2-1
						{-1,-1,-1,-1,4,4,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //21
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //22
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //23
							
						{-1,6,6,6,6,6,		-1,-1,-1,-1,9,9,-1,-1,-1,-1,-1,-1,-1,-1,7,7,-1,-1,		-1,-1,-1,-1,-1,-1}, //24
						{-1,6,-1,-1,-1,6,	-1,-1,-1,-1,9,9,-1,-1,-1,-1,-1,-1,-1,-1,8,8,-1,-1,		-1,-1,-1,-1,-1,-1}, //25
						{-1,6,-1,6,-1,6,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1}, //26
						{-1,6,-1,-1,-1,6,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,10,-1,-1,-1,-1}, //27
						{-1,6,6,6,6,6,		-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	11,-1,-1,-1,-1,-1}, //28
						{-1,-1,-1,-1,-1,-1,	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,	-1,12,-1,-1,-1,-1}};//29
		return temp;
	}
	
	private static int[][] fatbastard(){
		int[][] temp = {{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //0
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //1
						{0,0,7,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //2
						{0,0,7,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //3
						{0,0,7,0,0,0,	7,7,0,0,7,7,7,7,0,0,8,8,8,8,0,0,8,8,	0,0,0,0,0,0}, //4
						{0,0,7,0,0,0,	7,7,0,0,7,7,7,7,0,0,8,8,8,8,0,0,8,8,	0,0,0,0,0,0}, //5
						
						{0,0,0,0,6,6,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	9,9,0,0,0,0}, //6
						{0,0,0,0,6,6,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	9,9,0,0,0,0}, //7
						{0,0,0,0,6,6,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	9,9,0,0,0,0}, //8
						{0,0,0,0,6,6,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	9,9,0,0,0,0}, //9
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //10
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //11
						{0,0,0,0,6,6,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	9,9,0,0,0,0}, //12
						{0,0,0,0,6,6,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	9,9,0,0,0,0}, //13
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //14
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //15
						{0,0,0,0,5,5,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //16
						{0,0,0,0,5,5,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //17
						{0,0,0,0,5,5,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	10,10,0,0,0,0}, //18
						{0,0,0,0,5,5,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	10,10,0,0,0,0}, //19
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //20
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //21
						{0,0,0,0,5,5,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	10,10,0,0,0,0}, //22
						{0,0,0,0,5,5,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	10,10,0,0,0,0}, //23
							
						{0,0,0,0,0,0,	4,4,4,4,0,0,4,4,0,0,0,0,3,3,0,0,3,3,	0,0,0,0,0,0}, //24
						{0,0,0,0,0,0,	4,4,4,4,0,0,4,4,0,0,0,0,3,3,0,0,3,3,	0,0,0,0,0,0}, //25
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //26
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}, //27
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,7,7,7,7,7}, //28
						{0,0,0,0,0,0,	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	0,0,0,0,0,0}};//29
		return temp;
	}
}
